---
layout: post
title:  "Explain pointers like I am five"
date:   2017-01-28 17:50:00 -0800
categories: pointers
---

A few months ago I was trying to explain pointers to a friend that was taking a beginning level computer science class.  I remembered an old [reddit post](https://www.reddit.com/r/learnprogramming/comments/1ehg69/explain_pointers_like_im_five/ca0a5l7/) that did an amazing job of distilling pointer's down to their core concept and explained it beautifully to a beginner.  I want to capture that reddit comment here so i would alway be able to share it with friends.  Enjoy!

## Explain pointer's like I am five

Here is the full quote for reference, but I am going to break it down a bit more below to add some visual elements to it as well.
> [â€“] [munificent](https://www.reddit.com/user/munificent) 218 points 3 years ago 
> 
> (I'm going to elide the byte/word distinction for simplicity here.)
> Imagine all of your memory as a big sheet of graph paper. Each square represents one unit of memory. Starting at the top left, you can count squares. So "1" is the first square, "2" is the next and so on. Using this, you can uniquely identify each square on the sheet. If someone says, "Hey, what's square 5", you can find it.
> This is each square's address. An address is a number that identifies a location in memory.
> Because these squares represent memory, you can store stuff in them. You can write a little number in each one. If you want to store 3 in memory, you write that in a square. Every variable in your program will get assigned a square where it stores its value. When you do:
> a = 123;
> The compiler knows what square is owned by a (determining this is, in fact, part of a compiler's job) so it turns this into code that writes "123" on that square.
> Note that squares hold numbers, and addresses are numbers too. This means you can put a number in a square that represents the address of another number.
> That's a pointer. A pointer is a variable whose value is an address. (Some people don't distinguish clearly between "address" and "pointer" but I think it's clearer to keep them separate.)

Credit to reddit user [munificent](https://www.reddit.com/user/munificent) for the great explaination!

## Explain pointer's like I am five with diagrams

> Imagine all of your memory as a big sheet of graph paper. Each square represents one unit of memory. Starting at the top left, you can count squares. So "1" is the first square, "2" is the next and so on. Using this, you can uniquely identify each square on the sheet. If someone says, "Hey, what's square 5", you can find it.

Here's that big sheet of paper with all of the squares uniquely identified.  The square with the red outline is square 5!  We found it!

![Grid with addresses]({{site.baseurl}}public/pointers/grid_with_address.png)

The number in the upper left of each square is that square's address.

> An address is a number that identifies a location in memory.  Because these squares represent memory, you can store stuff in them. You can write a little number in each one. If you want to store 3 in memory, you write that in a square.

Let's store the value '3' in address 5.  You can see that the square with address 5 now has the number '3' stored inside of it.

![Grid with value in address 5]({{site.baseurl}}public/pointers/grid_with_value_in_5.png)

> Every variable in your program will get assigned a square where it stores its value. When you do:
> a = 123;
> The compiler knows what square is owned by a (determining this is, in fact, part of a compiler's job) so it turns this into code that writes "123" on that square.




Lastly, a special nod to [Binky](https://www.youtube.com/watch?v=6pmWojisM_E) who provides a very entertaining tutorial on pointers.